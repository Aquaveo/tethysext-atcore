image: docker:git

stages:
  - test
#  - coverage
  - build

variables:
  TETHYS_CORE_TAG: 'v2.0.4-extensions-r3'

lint:
  image: python:2.7
  stage: test
  script:
    - pip install flake8
    - flake8 .

unit_tests:
  stage: test
  script:
    # Setup
    - docker rm -f tethys_atcore tethys_postgis || true
    - docker pull ciwater/postgis
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/tethys/aqua-tethys/tethyscore:$TETHYS_CORE_TAG
    # Build
    - docker build -t tethys_atcore .
    # Run dependencies
    - docker run -d --name tethys_postgis -p 5435:5432 -e TETHYS_DEFAULT_PASS='pass' -e TETHYS_SUPER_PASS='pass' ciwater/postgis
    - echo "wait for db to start up..."
    - sleep 30s
    - docker exec tethys_postgis /bin/bash -c "export PGPASSWORD='pass'; createdb -U tethys_super -p 5435 -h 172.17.0.1 -E SQL_ASCII --no-password --owner tethys_super appusertests"
    # Run
    - docker run -d --name tethys_atcore -e TETHYS_PUBLIC_HOST='172.17.0.1' -e TETHYS_DB_USERNAME='tethys_super' -e TETHYS_DB_PASSWORD='pass' -e TETHYS_DB_HOST='172.17.0.1' -e TETHYS_DB_PORT='5435' tethys_atcore
    - echo "wait for container to start up..."
    - sleep 60s
    - docker logs tethys_atcore
    # Test
    - docker exec tethys_atcore /bin/bash -c ". /usr/lib/tethys/miniconda/bin/activate tethys; cd /var/www/tethys/exts/tethysext-atcore; coverage run --rcfile=coverage.ini -m unittest -v tethysext.atcore.tests.unit_tests; coverage report"
    # Extract coverage artifact
    - docker exec tethys_atcore /bin/bash -c "cat /var/www/tethys/exts/tethysext-atcore/.coverage" > .unittests
    # Clean up
    - docker rm -f tethys_atcore tethys_postgis || true
  artifacts:
    paths:
      - .unittests
    expire_in: 1 hour
  tags:
    - docker

integration_tests:
  stage: test
  script:
    # Setup
    - docker rm -f tethys_atcore tethys_postgis || true
    - docker pull ciwater/postgis
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/tethys/aqua-tethys/tethyscore:$TETHYS_CORE_TAG
    # Build
    - docker build -t tethys_atcore .
    # Run dependencies
    - docker run -d --name tethys_postgis -p 5435:5432 -e TETHYS_DEFAULT_PASS='pass' -e TETHYS_SUPER_PASS='pass' ciwater/postgis
    - echo "wait for db to start up..."
    - sleep 30s
    - docker exec tethys_postgis /bin/bash -c "export PGPASSWORD='pass'; createdb -U tethys_super -p 5435 -h 172.17.0.1 -E SQL_ASCII --no-password --owner tethys_super appusertests"
    # Run
    - docker run -d --name tethys_atcore -e TETHYS_PUBLIC_HOST='172.17.0.1' -e TETHYS_DB_USERNAME='tethys_super' -e TETHYS_DB_PASSWORD='pass' -e TETHYS_DB_HOST='172.17.0.1' -e TETHYS_DB_PORT='5435' tethys_atcore
    - echo "wait for container to start up..."
    - sleep 60s
    - docker logs tethys_atcore
    # Test
    - docker exec tethys_atcore /bin/bash -c ". /usr/lib/tethys/miniconda/bin/activate tethys; cd /var/www/tethys/exts/tethysext-atcore; coverage run --rcfile=coverage.ini /usr/lib/tethys/src/manage.py test -v 2 tethysext.atcore.tests.integrated_tests; coverage report"
    # Extract coverage artifact
    - docker exec tethys_atcore /bin/bash -c "cat /var/www/tethys/exts/tethysext-atcore/.coverage" > .integrationtests
    # Clean up
    - docker rm -f tethys_atcore tethys_postgis || true
  artifacts:
    paths:
      - .integrationtests
    expire_in: 1 hour
  tags:
    - docker

#coverage:
#  image: python:2.7
#  stage: coverage
#  dependencies:
#    - unit_tests
#    - integration_tests
#  script:
#    - pip install coverage
#    - coverage combine .unittests .integrationtests
#    - coverage report

# Last error: /var/www/tethys/exts/tethysext-atcore/tethysext/atcore/controllers.py   NoSource: No source for code: '/var/www/tethys/exts/tethysext-atcore/tethysext/atcore/controllers.py'.
# Aborting report output, consider using -i.

build:
  stage: build
  script:
    - docker build --squash -t $CI_REGISTRY_IMAGE/atcore:$CI_COMMIT_TAG -t $CI_REGISTRY_IMAGE/atcore:latest .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/atcore:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/atcore:latest
  tags:
    - docker
  only:
    - tags
