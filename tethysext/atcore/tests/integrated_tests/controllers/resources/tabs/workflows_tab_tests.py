"""
********************************************************************************
* Name: workflows_tab_tests.py
* Author: nswain
* Created On: November 23, 2020
* Copyright: (c) Aquaveo 2020
********************************************************************************
"""
from unittest import mock

from django.test import RequestFactory
from django.http import JsonResponse
from tethys_apps.models import TethysApp
from tethysext.atcore.controllers.app_users.mixins import AppUsersViewMixin

from tethysext.atcore.services.app_users.roles import Roles
from tethysext.atcore.services.map_manager import MapManagerBase
from tethysext.atcore.services.base_spatial_manager import BaseSpatialManager
from tethysext.atcore.models.app_users import Resource, ResourceWorkflow, ResourceWorkflowStep
from tethysext.atcore.tests.utilities.sqlalchemy_helpers import SqlAlchemyTestCase
from tethysext.atcore.tests.utilities.sqlalchemy_helpers import setup_module_for_sqlalchemy_tests, \
    tear_down_module_for_sqlalchemy_tests
from tethysext.atcore.controllers.resources import ResourceTab, ResourceWorkflowsTab


def setUpModule():
    setup_module_for_sqlalchemy_tests()


def tearDownModule():
    tear_down_module_for_sqlalchemy_tests()


class BasicWorkflow(ResourceWorkflow):
    TYPE = 'basic_workflow'
    DISPLAY_TYPE_SINGULAR = 'Basic Workflow'
    DISPLAY_TYPE_PLURAL = 'Basic Workflows'

    __mapper_args__ = {
        'polymorphic_identity': TYPE
    }

    @classmethod
    def new(cls, app, name, *args, **kwargs):
        return cls(name=name)


class WorkflowsTabWithTypes(ResourceWorkflowsTab):

    @classmethod
    def get_workflow_types(cls):
        return {BasicWorkflow.TYPE: BasicWorkflow}


class ResourceWorkflowsTabTests(SqlAlchemyTestCase):

    def setUp(self):
        super().setUp()

        self.request_factory = RequestFactory()

        self.resource = Resource(
            name="Test Resource"
        )

        self.workflow = ResourceWorkflow(
            name='Test Workflow'
        )

        self.step1 = ResourceWorkflowStep(
            name='step1',
            help='help1',
            order=1
        )
        self.workflow.steps.append(self.step1)

        self.workflow.resource = self.resource

        self.session.add(self.resource)
        self.session.commit()

        self.app = mock.MagicMock(spec=TethysApp, url_namespace='foo_namespace')
        ResourceWorkflowsTab._app = self.app

        self.reverse_url = '/foo/bar'
        reverse_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.reverse')
        self.mock_reverse = reverse_patcher.start()
        self.mock_reverse.return_value = self.reverse_url
        self.addCleanup(reverse_patcher.stop)

        redirect_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.redirect')
        self.mock_redirect = redirect_patcher.start()
        self.addCleanup(redirect_patcher.stop)

        messages_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.messages')
        self.mock_messages = messages_patcher.start()
        self.addCleanup(messages_patcher.stop)

        log_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.log')
        self.mock_log = log_patcher.start()
        self.addCleanup(log_patcher.stop)

        has_permission_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.has_permission')
        self.mock_has_permission = has_permission_patcher.start()
        self.mock_has_permission.return_value = True
        self.addCleanup(has_permission_patcher.stop)

        get_style_patcher = mock.patch('tethysext.atcore.controllers.resources.tabs.workflows_tab.get_style_for_status')
        self.mock_get_style = get_style_patcher.start()
        self.addCleanup(get_style_patcher.stop)

        self.mock_make_session = mock.MagicMock(return_value=self.session)
        get_sessionmaker_patcher = mock.patch.object(AppUsersViewMixin, 'get_sessionmaker')
        self.mock_get_sessionmaker = get_sessionmaker_patcher.start()
        self.mock_get_sessionmaker.return_value = self.mock_make_session
        self.addCleanup(get_sessionmaker_patcher.stop)

    def tearDown(self):
        super().tearDown()

    def verify_workflow_cards(self, workflow_dict, expected_status, expected_creator='Unknown', can_delete=True):
        """Asserts to verify the workflow card dictionaries generated by get_context."""
        self.assertIn('id', workflow_dict)
        self.assertIn('name', workflow_dict)
        self.assertIn('resource', workflow_dict)
        self.assertIn('status', workflow_dict)
        self.assertIn('type', workflow_dict)
        self.assertIn('can_delete', workflow_dict)
        self.assertIn('creator', workflow_dict)
        self.assertIn('date_created', workflow_dict)

        self.assertEqual(str(self.workflow.id), workflow_dict['id'])
        self.assertEqual(self.workflow.name, workflow_dict['name'])
        self.assertEqual(self.resource, workflow_dict['resource'])
        self.assertEqual(self.workflow.DISPLAY_TYPE_SINGULAR, workflow_dict['type'])
        self.assertEqual(can_delete, workflow_dict['can_delete'])
        self.assertEqual(expected_creator, workflow_dict['creator'])
        self.assertEqual(self.workflow.date_created, workflow_dict['date_created'])

        self.verify_workflow_status_dict(workflow_dict['status'], expected_status)

    def verify_workflow_status_dict(self, status_dict, expected_status):
        """Verify the status dictionary contained in the workflow cards dictionary."""
        self.assertIn('href', status_dict)
        self.assertIn('style', status_dict)
        self.assertIn('title', status_dict)

        self.assertEqual(self.reverse_url, status_dict['href'])

        if expected_status == self.workflow.STATUS_PENDING or expected_status == '' or expected_status is None:
            self.assertEqual('primary', status_dict['style'])
            self.assertEqual('Begin', status_dict['title'])

        elif expected_status == self.workflow.STATUS_WORKING:
            self.assertEqual(self.mock_get_style(), status_dict['style'])
            self.assertEqual('Running', status_dict['title'])

        elif expected_status == self.workflow.STATUS_COMPLETE:
            self.assertEqual(self.mock_get_style(), status_dict['style'])
            self.assertEqual('View Results', status_dict['title'])

        elif expected_status == self.workflow.STATUS_ERROR:
            self.assertEqual('primary', status_dict['style'])
            self.assertEqual('Continue', status_dict['title'])

        elif expected_status == self.workflow.STATUS_FAILED:
            self.assertEqual(self.mock_get_style(), status_dict['style'])
            self.assertEqual('Failed', status_dict['title'])

        else:
            self.assertEqual(self.mock_get_style(), status_dict['style'])
            self.assertEqual(expected_status, status_dict['title'])

    def test_properties_default(self):
        """Verify the default value of any properties of ResourceWorkflowsTab."""
        self.assertEqual('atcore/resources/tabs/workflows.html', ResourceWorkflowsTab.template_name)
        self.assertIn('get', ResourceWorkflowsTab.http_method_names)
        self.assertIn('post', ResourceWorkflowsTab.http_method_names)
        self.assertIn('delete', ResourceWorkflowsTab.http_method_names)
        self.assertIn('atcore/js/enable-tooltips.js', ResourceWorkflowsTab.js_requirements)
        self.assertIn('atcore/js/delete_row.js', ResourceWorkflowsTab.js_requirements)
        self.assertIn('atcore/resources/workflows_tab.js', ResourceWorkflowsTab.js_requirements)

        # Ensure the default js_requirements for ResourceTabs are also included
        for requirement in ResourceTab.js_requirements:
            self.assertIn(requirement, ResourceWorkflowsTab.js_requirements)

        self.assertIn('atcore/css/btn-fab.css', ResourceWorkflowsTab.css_requirements)
        self.assertIn('atcore/css/flat-modal.css', ResourceWorkflowsTab.css_requirements)
        self.assertIn('atcore/resource_workflows/workflows.css', ResourceWorkflowsTab.css_requirements)

        # Ensure the default css_requirements for ResourceTabs are also included
        for requirement in ResourceTab.css_requirements:
            self.assertIn(requirement, ResourceWorkflowsTab.css_requirements)

        self.assertIn('atcore/resources/tabs/new_workflow_modal.html', ResourceWorkflowsTab.modal_templates)
        self.assertIn('atcore/resources/tabs/delete_workflow_modal.html', ResourceWorkflowsTab.modal_templates)
        self.assertEqual('workflows_tab_loaded', ResourceWorkflowsTab.post_load_callback)
        self.assertTrue(ResourceWorkflowsTab.show_all_workflows)
        self.assertIn(Roles.APP_ADMIN, ResourceWorkflowsTab.show_all_workflows_roles)
        self.assertIn(Roles.DEVELOPER, ResourceWorkflowsTab.show_all_workflows_roles)
        self.assertIn(Roles.ORG_ADMIN, ResourceWorkflowsTab.show_all_workflows_roles)
        self.assertIn(Roles.ORG_REVIEWER, ResourceWorkflowsTab.show_all_workflows_roles)

    def test_get_workflow_types_default(self):
        """Verify the default behavior of the ResourceWorkflowsTab.get_workflow_types() method."""
        self.assertDictEqual({}, ResourceWorkflowsTab.get_workflow_types())

    def test_get_map_manager_default(self):
        """Verify the default behavior of the ResourceWorkflowsTab.get_map_manager() method."""
        instance = ResourceWorkflowsTab()
        self.assertIs(MapManagerBase, instance.get_map_manager())

    def test_get_spatial_manager_default(self):
        """Verify the default behavior of the ResourceWorkflowsTab.get_spatial_manager() method."""
        instance = ResourceWorkflowsTab()
        self.assertIs(BaseSpatialManager, instance.get_spatial_manager())

    def test_get_sds_setting_name_default(self):
        """Verify the default behavior of the ResourceWorkflowsTab.get_sds_setting_name() method."""
        instance = ResourceWorkflowsTab()
        self.assertIsNone(instance.get_sds_setting_name())

    def test_get_tabbed_view_context(self):
        """Verify that the additional context provided by ResourceWorkflowsTab."""
        request = self.request_factory.get('/foo/12345/bar/workflows/')
        in_context = {'foo': 'bar'}

        ret = ResourceWorkflowsTab.get_tabbed_view_context(request, in_context)

        expected_context = {
            'workflow_types': {}
        }
        self.assertDictEqual(expected_context, ret)

    def test_get_context_show_all_workflows_user_role(self):
        """Test case when show_all_workflows is False but user has a role listed in show_all_workflows_roles."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Configure to not show all workflows by default
        instance.show_all_workflows = False

        # Users with these roles should be able to see all workflows even if show_all_workflows is False
        instance.show_all_workflows_roles = [Roles.ORG_ADMIN]

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_ADMIN)  # User is ORG_ADMIN
        request.user = user.django_user

        # Set creator of Workflow to be request user
        self.workflow.creator = user

        # Add second Workflow to the resource that was not created by request user (creator not set)
        other_workflow = ResourceWorkflow(name='Other Workflow')
        other_workflow.resource = self.resource
        self.session.add(other_workflow)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)

        # Both workflows returned despite the Other Workflow not being created by user
        self.assertEqual(2, len(context['workflow_cards']))

    def test_get_context_show_all_workflows_no_user_role(self):
        """Test case when show_all_workflows is True and user does not have a role listed in show_all_workflows_roles."""  # noqa: E501
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Configure to show all workflows by default
        instance.show_all_workflows = True

        # Users with these roles should be able to see all workflows even if show_all_workflows is False
        instance.show_all_workflows_roles = [Roles.ORG_ADMIN]

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set creator of Workflow to be request user
        self.workflow.creator = user

        # Add second Workflow to the resource that was not created by request user (creator not set)
        other_workflow = ResourceWorkflow(name='Other Workflow')
        other_workflow.resource = self.resource
        self.session.add(other_workflow)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)

        # Both workflows returned despite the Other Workflow not being created by user
        self.assertEqual(2, len(context['workflow_cards']))

    def test_get_context_user_workflows_only(self):
        """Test case when show_all_workflows is False and user does not have a role listed in show_all_workflows_roles."""  # noqa: E501
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Configure to not show all workflows by default
        instance.show_all_workflows = False

        # Users with these roles should be able to see all workflows even if show_all_workflows is False
        instance.show_all_workflows_roles = [Roles.ORG_ADMIN]

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set creator of Workflow to be request user
        self.workflow.creator = user

        # Add second Workflow to the resource that was not created by request user (creator not set)
        other_workflow = ResourceWorkflow(name='Other Workflow')
        other_workflow.resource = self.resource
        self.session.add(other_workflow)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)

        # Only the first workflow should be returned, because it is created by the request user
        self.assertEqual(1, len(context['workflow_cards']))
        self.assertEqual(self.workflow.name, context['workflow_cards'][0]['name'])

    def test_get_context_workflow_status_pending(self):
        """Verify workflow cards for workflow that has pending status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_PENDING)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_PENDING)

    def test_get_context_workflow_status_working(self):
        """Verify workflow cards for workflow that has working status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_WORKING)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_WORKING)

    def test_get_context_workflow_status_complete(self):
        """Verify workflow cards for workflow that has complete status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_COMPLETE)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_COMPLETE)

    def test_get_context_workflow_status_error(self):
        """Verify workflow cards for workflow that has error status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_ERROR)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_ERROR)

    def test_get_context_workflow_status_failed(self):
        """Verify workflow cards for workflow that has failed status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_FAILED)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_FAILED)

    def test_get_context_workflow_status_other(self):
        """Verify workflow cards for workflow that has some other status."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True, user_role=Roles.ORG_USER)  # User is ORG_USER
        request.user = user.django_user

        # Set status of step to set status of workflow
        self.step1.set_status(status=ResourceWorkflowStep.STATUS_APPROVED)
        self.session.commit()

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))

        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_APPROVED)

    def test_get_context_user_is_creator(self):
        """Verify workflow cards for workflow that was created by current user."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True)
        request.user = user.django_user

        # Set creator of Workflow to be request user
        self.workflow.creator = user
        self.session.commit()

        # Fall back to whether user is creator or not to be able to delete
        self.mock_has_permission.return_value = False

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))
        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_PENDING,
                                   expected_creator=user.username, can_delete=True)

    def test_get_context_user_is_not_creator(self):
        """Verify workflow cards for workflow that was not created by current user."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True)
        request.user = user.django_user

        # Set creator of Workflow to be user other than the request user
        other_user = self.get_user(return_app_user=True)
        self.workflow.creator = other_user
        self.session.commit()

        # Fall back to whether user is creator or not to be able to delete
        self.mock_has_permission.return_value = False

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))
        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_PENDING,
                                   expected_creator=other_user.username, can_delete=False)

    def test_get_context_workflow_no_creator(self):
        """Verify workflow cards for workflow that was not created by current user and doesn't have a creator."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.get('/foo/12345/bar/workflows/')

        # Set request user
        user = self.get_user(return_app_user=True)
        request.user = user.django_user

        # Fall back to whether user is creator or not to be able to delete
        self.mock_has_permission.return_value = False

        context = instance.get_context(request, self.session, self.resource, {})

        self.assertIn('workflow_cards', context)
        self.assertEqual(1, len(context['workflow_cards']))
        self.verify_workflow_cards(context['workflow_cards'][0], ResourceWorkflow.STATUS_PENDING,
                                   expected_creator='Unknown', can_delete=True)

    def test_post_ideal(self):
        """Test new workflow form submissions with ideal submission."""
        instance = WorkflowsTabWithTypes()
        post_data = {
            'new-workflow': '',
            'workflow-name': 'New Workflow',
            'workflow-type': 'basic_workflow'
        }
        request = self.request_factory.post('/foo/12345/bar/workflows/', post_data)

        # Set request user
        user = self.get_user(return_app_user=True)
        request.user = user.django_user

        ret = instance.post(request, str(self.resource.id))

        self.mock_redirect.assert_called_with(request.path)
        self.mock_messages.success.assert_called_with(request, 'Successfully created new Basic Workflow: New Workflow')
        self.assertEqual(self.mock_redirect(), ret)

        self.session.query(ResourceWorkflow).filter(ResourceWorkflow.name == 'New Workflow').one()

    def test_post_new_workflow_not_in_params(self):
        """Test new workflow form submissions with missing new-workflow parameter."""
        instance = ResourceWorkflowsTab()
        request = self.request_factory.post('/foo/12345/bar/workflows/')

        ret = instance.post(request, str(self.resource.id))

        self.mock_redirect.assert_called_with(request.path)
        self.mock_messages.warning.assert_called_with(request, 'Unable to perform requested action.')
        self.assertEqual(self.mock_redirect(), ret)

    def test_post_no_workflow_name(self):
        """Test new workflow form submissions with missing workflow name."""
        instance = ResourceWorkflowsTab()
        post_data = {
            'new-workflow': '',
            'workflow-name': '',
            'workflow-type': 'foo'
        }
        request = self.request_factory.post('/foo/12345/bar/workflows/', post_data)

        ret = instance.post(request, str(self.resource.id))

        self.mock_redirect.assert_called_with(request.path)
        self.mock_messages.error.assert_called_with(request, 'Unable to create new workflow: no name given.')
        self.assertEqual(self.mock_redirect(), ret)

    def test_post_no_workflow_type(self):
        """Test new workflow form submissions with missing workflow type."""
        instance = ResourceWorkflowsTab()
        post_data = {
            'new-workflow': '',
            'workflow-name': 'foo',
            'workflow-type': ''
        }
        request = self.request_factory.post('/foo/12345/bar/workflows/', post_data)

        ret = instance.post(request, str(self.resource.id))

        self.mock_redirect.assert_called_with(request.path)
        self.mock_messages.error.assert_called_with(request, 'Unable to create new workflow: invalid workflow type.')
        self.assertEqual(self.mock_redirect(), ret)

    def test_post_exception_during_model_creation(self):
        """Test new workflow form submissions with exception occurring during creation of the new workflow."""
        instance = WorkflowsTabWithTypes()
        post_data = {
            'new-workflow': '',
            'workflow-name': 'New Workflow',
            'workflow-type': 'basic_workflow'
        }
        request = self.request_factory.post('/foo/12345/bar/workflows/', post_data)

        # Set request user
        user = self.get_user(return_app_user=True)
        request.user = user.django_user

        # Setup exception side effect with a mock session
        mock_session = mock.MagicMock()
        mock_session.commit.side_effect = Exception
        self.mock_make_session.return_value = mock_session

        ret = instance.post(request, str(self.resource.id))

        self.mock_log.exception.assert_called_with('An unexpected error occurred while creating the new workflow.')
        self.mock_messages.error\
            .assert_called_with(request, 'An unexpected error occurred while creating the new workflow.')
        self.mock_redirect.assert_called_with(request.path)
        mock_session.close.assert_called()
        self.assertEqual(self.mock_redirect(), ret)

    def test_delete_ideal(self):
        """Test delete workflows requests with ideal submission."""
        instance = ResourceWorkflowsTab()

        workflow_id = str(self.workflow.id)
        request = self.request_factory.delete(f'/foo/12345/bar/workflows/?id={workflow_id}')

        ret = instance.delete(request, str(self.resource.id))

        self.mock_log.debug.assert_called_with(f'Workflow ID: {workflow_id}')
        self.mock_log.info.assert_called_with(f'Deleted Workflow: {self.workflow}')
        self.assertIsInstance(ret, JsonResponse)
        self.assertEqual(b'{"success": true}', ret.content)
        self.assertIsNone(self.session.query(ResourceWorkflow).get(workflow_id))

    def test_delete_exception(self):
        """Test delete workflows requests with exception occurring."""
        instance = ResourceWorkflowsTab()

        workflow_id = str(self.workflow.id)
        request = self.request_factory.delete(f'/foo/12345/bar/workflows/?id={workflow_id}')

        # Setup exception side effect with a mock session
        mock_session = mock.MagicMock()
        mock_session.commit.side_effect = Exception
        self.mock_make_session.return_value = mock_session

        ret = instance.delete(request, str(self.resource.id))

        self.mock_log.exception.assert_called_with('An error occurred while attempting to delete a workflow.')
        mock_session.close.assert_called()
        self.assertIsInstance(ret, JsonResponse)
        self.assertEqual(b'{"success": false, "error": "An unexpected error has occurred."}', ret.content)
